name: Build Multi-Architecture Docker Image

on:
  push:
    branches: [ main, master ]
    paths:
      - 'zhihu-tongxing-nextjs/**'
      - '.github/workflows/docker-multiarch.yml'
      - 'Dockerfile'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'zhihu-tongxing-nextjs/**'
      - '.github/workflows/docker-multiarch.yml'
      - 'Dockerfile'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'
      platforms:
        description: 'Target platforms'
        required: false
        default: 'linux/amd64,linux/arm64'

env:
  REGISTRY: zhihutongxing-tcr.tencentcloudcr.com
  IMAGE_NAME: project-zhihutongxing/app-zhihutongxing

jobs:
  # 代码质量检查
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: zhihu-tongxing-nextjs/package-lock.json

    - name: Install dependencies
      run: |
        cd zhihu-tongxing-nextjs
        npm ci

    - name: Run linting
      run: |
        cd zhihu-tongxing-nextjs
        npm run lint

    - name: Run type checking
      run: |
        cd zhihu-tongxing-nextjs
        npm run type-check

    - name: Build application
      run: |
        cd zhihu-tongxing-nextjs
        npm run build

  # 多架构Docker构建
  build-and-push:
    needs: lint-and-test
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Tencent Cloud TCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.TCR_USERNAME }}
        password: ${{ secrets.TCR_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
          type=sha,prefix={{branch}}-

    - name: Build and push multi-architecture image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./zhihu-tongxing-nextjs
        platforms: ${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate build summary
      run: |
        echo "## 🚀 Multi-Architecture Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Platforms:** \`${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Tags Built:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # 镜像安全扫描
  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 部署通知
  notify-deployment:
    needs: [build-and-push, security-scan]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Create deployment status
      uses: actions/github-script@v7
      with:
        script: |
          const { data: deployment } = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            description: 'Multi-architecture Docker image deployment',
            auto_merge: false,
            required_contexts: []
          });

          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.id,
            state: '${{ needs.build-and-push.result == 'success' && 'success' || 'failure' }}',
            description: 'Docker image built and pushed to TCR',
            environment_url: 'https://console.cloud.tencent.com/tcr'
          });
